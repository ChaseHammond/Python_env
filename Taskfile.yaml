version: '3'

tasks:

  setup:
    desc: Setup local environment
    deps: [check-tools, create-files]

  install:
    desc: Install dev dependencies & pre-commit hooks
    cmds:
      - uv sync
      - pre-commit install
      - echo "Development environment ready!"

  check-tools:
    desc: Checks that tools are installed
    silent: true
    cmds: 
      - |
        errors=""
        if ! command -v uv >/dev/null 2>&1; then
          errors+="uv is required. Please install it: https://docs.astral.sh/uv/getting-started/installation/.\n"
        fi
        if ! command -v pre-commit >/dev/null 2>&1; then
          errors+="pre-commit is required. Install with 'uv tool install pre-commit'.\n"
        fi
        if ! command -v pytest >/dev/null 2>&1; then
          errors+="pytest is required. Install with 'uv add pytest' or in pyproject.toml.\n"
        fi

        if ! command -v task >/dev/null 2>&1; then
          errors+="Taskfile is required. Install: https://taskfile.dev/getting-started/#installation\n"
        fi

        if [ -n "$errors" ]; then
          echo -e "$errors"
          exit 1
        fi

  create-files:
    desc: Creates necessary files (README.md, scratch/, .env)
    silent: true
    cmds: 
      - |
        if [ ! -f ./README.md ]; then
          echo "# New Project" > README.md
          echo "README.md created"
        fi

        if [ ! -d ./scratch ]; then
          mkdir scratch/
          echo "./scratch directory created"
        fi

        if [ ! -f ./.env ]; then
          touch .env
          echo ".env file created"
        fi

        echo "created all necessary files"
  
  init:
    desc: Initialize project (get name, create venv, updated README)
    silent: true
    cmds:
      - |
        repo_name=$(basename "$(git rev-parse --show-toplevel)")
        default_project_name=$(echo "$repo_name" | sed -E 's/[-_]/ /g' | awk '{for(i=1;i<=NF;i++){ $i=toupper(substr($i,1,1)) substr($i,2) } print}')
        echo "Enter project name [default: $default_project_name]:"
        read input
        project_name=${input:-$default_project_name}
        safe_name=$(echo "$project_name" | tr '[:upper:] ' '[:lower:]_')
  
        echo "Creating project: $project_name ($safe_name)"
  
        # Create .env if missing
        if [ ! -f ".env" ]; then
          touch .env
          echo "# Environment variables for $project_name" > .env
          echo ".env created"
        else
          echo ".env already exists"
        fi
  
        # Create scratch/ folder
        if [ ! -d "scratch" ]; then
          mkdir scratch
          echo "scratch/ directory created"
        else
          echo "scratch/ directory already exists"
        fi
  
        # Create Python virtual environment
        uv venv --python 3.13 .venv
        echo "source .venv/bin/activate" > activate.sh
        chmod +x activate.sh
        echo "Virtual environment created (.venv)"
        echo "Run 'source activate.sh' to activate"
